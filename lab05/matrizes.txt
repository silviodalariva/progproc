1.

#include <stdio.h>

int main() {
    int matriz[4][4];
    int count = 0;

    // lê a matriz
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("Digite o valor para a posicao (%d,%d): ", i, j);
            scanf("%d", &matriz[i][j]);

            // conta os valores maiores que 10
            if (matriz[i][j] > 10) {
                count++;
            }
        }
    }

    // escreve a quantidade de valores maiores que 10
    printf("A matriz possui %d valores maiores que 10.\n", count);

    return 0;
}


2.

#include <stdio.h>

int main() {
    int matriz[5][5];

    // preenche a matriz
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            if (i == j) {
                matriz[i][j] = 1;
            } else {
                matriz[i][j] = 0;
            }
        }
    }

    // escreve a matriz final
    printf("Matriz final:\n");
    for (int i = 0; i < 5; i++) {
        for (int j = 0; j < 5; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}


3.

#include <stdio.h>

int main() {
    int matriz[4][4];
    int maior = 0;
    int linha_maior, coluna_maior;

    // lê a matriz
    printf("Digite os elementos da matriz:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            scanf("%d", &matriz[i][j]);
            // atualiza o maior valor encontrado
            if (matriz[i][j] > maior) {
                maior = matriz[i][j];
                linha_maior = i;
                coluna_maior = j;
            }
        }
    }

    // imprime a matriz
    printf("Matriz:\n");
    for (int i = 0; i < 4; i++) {
        for (int j = 0; j < 4; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    // retorna a localização do maior valor
    printf("Maior valor encontrado: %d\n", maior);
    printf("Localizacao: linha %d, coluna %d\n", linha_maior, coluna_maior);

    return 0;
}

4.

#include <stdio.h>

int main() {
    int matriz[5][5];
    int x, i, j, achou = 0;

    // lê a matriz
    printf("Digite os elementos da matriz 5x5:\n");
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            scanf("%d", &matriz[i][j]);
        }
    }

    // lê o valor X a ser buscado
    printf("\nDigite o valor a ser buscado: ");
    scanf("%d", &x);

    // percorre a matriz buscando o valor X
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            if (matriz[i][j] == x) {
                printf("\nValor encontrado na linha %d, coluna %d.", i+1, j+1);
                achou = 1;
            }
        }
    }

    // se não encontrou, mostra a mensagem de "não encontrado"
    if (!achou) {
        printf("\nValor nao encontrado na matriz.");
    }

    return 0;
}

5.

#include <stdio.h>

#define TAM 10

int main() {
    int matriz[TAM][TAM];

    // Preenchimento da matriz
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            if (i < j) {
                matriz[i][j] = 2*i + 7*j - 2;
            } else if (i == j) {
                matriz[i][j] = 3*i*i - 1;
            } else {
                matriz[i][j] = 4*i*i*i - 5*j*j + 1;
            }
        }
    }

    // Impressão da matriz
    for (int i = 0; i < TAM; i++) {
        for (int j = 0; j < TAM; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}


6.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int main() {
    int i, j, matriz[4][4];

    // Gerando a matriz com valores aleatórios entre 1 e 20
    srand(time(NULL));
    for(i=0; i<4; i++) {
        for(j=0; j<4; j++) {
            matriz[i][j] = rand() % 20 + 1;
        }
    }

    printf("Matriz original:\n");
    for(i=0; i<4; i++) {
        for(j=0; j<4; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    // Transformando em matriz triangular inferior
    for(i=0; i<4; i++) {
        for(j=i+1; j<4; j++) {
            matriz[i][j] = 0;
        }
    }

    printf("\nMatriz transformada:\n");
    for(i=0; i<4; i++) {
        for(j=0; j<4; j++) {
            printf("%d ", matriz[i][j]);
        }
        printf("\n");
    }

    return 0;
}



7.

#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define LINHAS 5
#define COLUNAS 5

int main() {
    int cartela[LINHAS][COLUNAS];
    int numeros_sorteados[100] = {0};
    int numero, linha, coluna, i, j;

    // inicializa o gerador de números aleatórios
    srand(time(NULL));

    // gera os números da cartela
    for (i = 0; i < LINHAS; i++) {
        for (j = 0; j < COLUNAS; j++) {
            do {
                numero = rand() % 100;
            } while (numeros_sorteados[numero] == 1);

            numeros_sorteados[numero] = 1;
            cartela[i][j] = numero;
        }
    }

    // exibe a cartela gerada
    printf("Cartela de Bingo:\n");
    for (i = 0; i < LINHAS; i++) {
        for (j = 0; j < COLUNAS; j++) {
            printf("%02d ", cartela[i][j]);
        }
        printf("\n");
    }

    return 0;
}


8.

#include <stdio.h>

// função para somar duas matrizes
void somarMatrizes(float m1[2][2], float m2[2][2], float resultado[2][2]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            resultado[i][j] = m1[i][j] + m2[i][j];
        }
    }
}

// função para subtrair duas matrizes
void subtrairMatrizes(float m1[2][2], float m2[2][2], float resultado[2][2]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            resultado[i][j] = m1[i][j] - m2[i][j];
        }
    }
}

// função para adicionar uma constante a uma matriz
void adicionarConstante(float matriz[2][2], float constante) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            matriz[i][j] += constante;
        }
    }
}

// função para imprimir uma matriz
void imprimirMatriz(float matriz[2][2]) {
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            printf("%.2f ", matriz[i][j]);
        }
        printf("\n");
    }
}

int main() {
    float matriz1[2][2], matriz2[2][2], resultado[2][2], constante;
    char opcao;

    // lendo a primeira matriz
    printf("Digite os elementos da primeira matriz:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            scanf("%f", &matriz1[i][j]);
        }
    }

    // lendo a segunda matriz
    printf("Digite os elementos da segunda matriz:\n");
    for (int i = 0; i < 2; i++) {
        for (int j = 0; j < 2; j++) {
            scanf("%f", &matriz2[i][j]);
        }
    }

    // exibindo o menu de opções
    printf("\nEscolha uma opcao:\n");
    printf("a) somar as duas matrizes\n");
    printf("b) subtrair a primeira matriz da segunda\n");
    printf("c) adicionar uma constante as duas matrizes\n");
    printf("d) imprimir as matrizes\n");
    scanf(" %c", &opcao);

    // processando a opção escolhida pelo usuário
    switch(opcao) {
        case 'a':
            somarMatrizes(matriz1, matriz2, resultado);
            printf("Resultado:\n");
            imprimirMatriz(resultado);
            break;
        case 'b':
            subtrairMatrizes(matriz2, matriz1, resultado);
            printf("Resultado:\n");
            imprimirMatriz(resultado);
            break;
        case 'c':
            printf("Digite a constante a ser adicionada:\n");
            scanf("%f", &constante);
            adicionarConstante
